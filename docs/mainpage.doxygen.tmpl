/** @mainpage %Qore Oracle Module

    Contents of this documentation:
    - @ref intro
    - @ref functions
    - @ref qore_to_yaml_type_mappings
    - @ref yaml_emitter_option_constants


    @section intro Introduction

    The yaml module provides <a href="http://www.yaml.org">YAML</a> functionality
    to Qore, allowing qore programs to read and write information in YAML syntax.

    This module is released under the <a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html">LGPL 2.1</a>
    and is tagged as such in the module's header (meaning it can be loaded
    unconditionally regardless of how the Qore library was initialized).

    Like all Qore components, the yaml module is thread-safe.


    @section functions Available Functions
    
    |!Function|!Description|
    |@ref makeYAML|creates a YAML string from Qore data|
    |@ref parseYAML|parses a YAML string and returns Qore data|
    |@ref getYAMLInfo|returns version information about libyaml|

    @subsection makeYAML makeYAML()
    Synopsis: Creates a YAML string from Qore data. For information on Qore
    to YAML serialization, see @ref qore_to_yaml_type_mappings.

    Usage:
    @code
    string makeYAML(any $data, int $opts = Yaml::None, softint $width = -1, softint $indent = 2)
    @endcode
    
    Arguments:
    |\c any \c $data|Qore data to convert; cannot contain any objects or an exception will be raised|
    |\c int \c $opts \c = \c YAML::None|binary OR'ed @ref yaml_emitter_option_constants|
    |\c softint \c $width \c = \c -1|default line width for output, -1 = no line length limit|
    |\c softint \c $indent \c = \c 2|number of spaces to use for indentation when outputting block format or multiple lines;
        note that libyaml seems to be ignoring this parameter for now, so it may not have any effect|

    Return Value: \c string, the YAML string

    Example:
    @code
    my string $str = makeYAML($data, YAML::Canonical);
    @endcode

    Exceptions: \c YAML-EMITTER-ERROR: object found; YAML library error
    
    @subsection parseYAML parseYAML()
    
    Synopsis: Parses a YAML string and returns Qore data. For information
    on YAML to Qore deserialization, see @ref qore_to_yaml_type_mappings.

    Usage:
    @code
    any parseYAML(string $yaml)
    @endcode

    Arguments:
    |\c string \c $yaml|The YAML string to deserialize|

    Return Value: \c any: Qore data as deserialized from the YAML string

    Example:
    @code
    my any $data = parseYAML($yaml_string);
    @endcode

    Exceptions: \c YAML-PARSER-ERROR: error parsing YAML string

    @subsection getYAMLInfo getYAMLInfo()
    
    Synopsis: Returns version information about libyaml being used by the yaml module.

    Usage:
    @code
    hash getYAMLInfo()
    @endcode

    Return Value: \c hash: having keys as in the following table:
    |!Key|!Type|!Description|
    |\c version|\c string|the version string for the library, ex: \c "0.1.3"|
    |\c major|\c int|the integer major version for the library, ex: \c 0|
    |\c minor|\c int|the integer minor version for the library, ex: \c 1|
    |\c patch|\c int|the integer patch version for the library, ex: \c 3|

    Example:
    @code
    my hash $hash = getYAMLInfo();
    @endcode

    
    @section qore_to_yaml_type_mappings Qore to YAML Type Mappings
    
    Note that all Qore types except objects can be serialized to YAML,
    however \c NULL will be deserialized as \c NOTHING.

    |!QoreType|!YAML Tag|!Qore Example|!YAML Example|!Notes|
    |\c Type::Int|\c !!int|\c 300|\c 300|direct serialization|
    |\c Type::Float|\c !!float|\c 3.5|\c 3.5|direct serialization|
    |\c Type::String|\c !!str|\c "hello"|\c "hello"|YAML strings are enclosed in double-quotes, and libyaml will perform escaping as necessary to form a proper YAML string|
    |\c Type::Bool|\c !!bool|\c True|\c true|direct serialization to \c true and \c false|
    |\c Type::Date (relative)|\c !duration|\c P2M3DT10H14u|\c P2M3DT10H14u|Relative date/time values (durations) are serialized with Qore's <a href="http://en.wikipedia.org/wiki/ISO_8601#Durations">ISO-8601</a>-based format. This tag is a custom tag used only by Qore to store Qore relative date/time values in YAML.|
    |\c Type::Date (absolute)|\c !!timestamp|\c 2010-05-05T15:35:02.100|\c 2010-05-05T15:35:02.1+02:00|Absolute date/time values are serialized with YAML's <a href="http://yaml.org/type/timestamp.html">timestamp</a> format. Note that qore date/time values without an explicit time zone are assumed to be in the local time zone.  When converting a YAML timestamp to a Qore date, because Qore supports only up to microsecond resolution in date/time values, any digits after microseconds are lost.|
    |\c Type::NOTHING|\c !!null|\c NOTHING|\c null|direct serialization|
    |\c Type::NULL|\c !!null|\c NULL|\c null|serialization to YAML null, just like \c NOTHING; will be deserialized as \c NOTHING|
    |\c Type::List|\c !!seq|\c (1, 2, "three")|\c [1, 2, "three"]|direct serialization|
    |\c Type::Hash|\c !!map|\c ("key" : 1, "other" : 2.0, "data" : "three")|\c {key: 1, other: 2.0, data: "three"}|direct serialization, although qore will maintain key order as well even though this property is only defined for an ordered map|


    @section yaml_emitter_option_constants Yaml Emitter Option Constants
    
    |!Option|!Description|
    |\c None|No option|
    |\c Canonical|Emit canonical YAML|
    |\c EscapeUnicode|escape unicode characters|
    |\c ExplicitStartDoc|emit an explicit document start sequence|
    |\c ExplicitEndDoc|emit an explicit document end sequence|
    |\c BlockStyle|emit seq and map with block style|
    |\c Yaml1_1|emit YAML 1.1 (not necessary to use as this is the default and currently the only YAML version supported by libyaml)|

*/
