/** @mainpage %Qore yaml Module

    Contents of this documentation:
    - @ref intro
    - @ref functions
    - @ref qore_to_yaml_type_mappings
    - @ref yaml_emitter_option_constants

    @section intro Introduction

    The yaml module provides <a href="http://www.yaml.org">YAML</a> functionality to Qore, allowing qore programs to read and write information in %YAML syntax.

    This module is released under the <a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html">LGPL 2.1</a> and is tagged as such in the module's header (meaning it can be loaded unconditionally regardless of how the Qore library was initialized).

    Like all Qore components, the yaml module is thread-safe.

    The underlying %YAML functionality is provided by <a href="http://pyyaml.org/wiki/LibYAML">libyaml</a>.

    Also included with the binary yaml module:
    - <a href="../../YamlRpcClient/html/index.html">YamlRpcClient user module</a>
    - <a href="../../YamlRpcHandler/html/index.html">YamlRpcHandler user module</a>

    @section Examples
    
    @par To serialize a simple value or a complex data structure to a YAML string:
    @code
%requires yaml
my string $yaml_str = makeYAML($data, YAML::Canonical);
    @endcode

    @par To deserialize a YAML string to a Qore value:
    @code
%requires yaml
my any $data = parseYAML($yaml_str);
    @endcode

    @section functions Available Functions
    
    |!Function|!Description|
    |@ref makeYAML()|creates a %YAML string from Qore data|
    |@ref parseYAML()|parses a %YAML string and returns Qore data|
    |@ref getYAMLInfo()|returns version information about <a href="http://pyyaml.org/wiki/LibYAML">libyaml</a>|

    @section qore_to_yaml_type_mappings Qore to YAML Type Mappings
    
    Note that all Qore types except objects can be serialized to YAML,
    however \c NULL will be deserialized as \c NOTHING.

    |!QoreType|!YAML Tag|!Qore Example|!YAML Example|!Notes|
    |int|\c !!int|\c 300|\c 300|direct serialization|
    |float|\c !!float|\c 3.5|\c 3.5|direct serialization|
    |string|\c !!str|\c "hello"|\c "hello"|YAML strings are enclosed in double-quotes, and libyaml will perform escaping as necessary to form a proper YAML string|
    |bool|\c !!bool|\c True|\c true|direct serialization to \c true and \c false|
    |date (relative)|\c !duration|\c P2M3DT10H14u|\c P2M3DT10H14u|Relative date/time values (durations) are serialized with Qore's <a href="http://en.wikipedia.org/wiki/ISO_8601#Durations">ISO-8601</a>-based format. This tag is a custom tag used only by Qore to store Qore relative date/time values in YAML.|
    |date (absolute)|\c !!timestamp|\c 2010-05-05T15:35:02.100|\c 2010-05-05T15:35:02.1+02:00|Absolute date/time values are serialized with YAML's <a href="http://yaml.org/type/timestamp.html">timestamp</a> format. Note that qore date/time values without an explicit time zone are assumed to be in the local time zone.  When converting a YAML timestamp to a Qore date, because Qore supports only up to microsecond resolution in date/time values, any digits after microseconds are lost.|
    |NOTHING|\c !!null|\c NOTHING|\c null|direct serialization|
    |NULL|\c !!null|\c NULL|\c null|serialization to YAML null, just like \c NOTHING; will be deserialized as \c NOTHING|
    |list|\c !!seq|\c (1, 2, "three")|\c [1, 2, "three"]|direct serialization|
    |hash|\c !!map|\c ("key" : 1, "other" : 2.0, "data" : "three")|\c {key: 1, other: 2.0, data: "three"}|direct serialization, although qore will maintain key order as well even though this property is only defined for an ordered map|
*/
