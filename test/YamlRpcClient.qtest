#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%require-types
%strict-args
%enable-all-warnings

%requires ../qlib/YamlRpcClient.qm
%requires QUnit

%exec-class YamlRpcClientTest

class YamlRpcClientTest inherits QUnit::Test {
    constructor() : Test("YamlRpcClient test", "1.0") {
        addTestCase("YAML-RPC client test", \testYamlRpcClient());
        addTestCase("YAML-RPC connection test", \testYamlRpcConnection());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    testYamlRpcClient() {
        YamlRpcClient client(("url": "http://localhost:80"), True);

        assertEq(True, client instanceof YamlRpcClient);
    }

    testYamlRpcConnection() {
        string url = "yamlrpcs://localhost:8099/";
        YamlRpcConnection conn("test", "test", url, {"monitor": False});
        YamlRpcClient client = conn.get(False);
        string yurl = url;
        yurl =~ s/^yamlrpc/http/;
        assertEq(yurl, client.getURL());

        # test default path
        url = "yamlrpcs://localhost:8099";
        conn = new YamlRpcConnection("test", "test", url, {"monitor": False});
        client = conn.get(False);
        yurl = url;
        yurl =~ s/^yamlrpc/http/;
        assertEq(yurl + "/YAML", client.getURL());

        hash<ConnectionConstructorInfo> info = conn.getConstructorInfo();
        assertEq("yaml", info.module);
        assertEq("YamlRpcClient", info.class_name);
        assertEq("https://localhost:8099", info.args[0].url);
        checkPreAndPostProcessing(info);
    }

    private checkPreAndPostProcessing(hash<ConnectionConstructorInfo> info) {
        Program p(PO_NEW_STYLE | PO_STRICT_ARGS | PO_REQUIRE_TYPES);
        if (info.module)
            p.loadModule(info.module);
        if (info.pre_processing) {
            string pre_processing = sprintf("sub pre_processing(reference<*softlist<auto>> args, bool connect, *hash rtopts) { %s }", info.pre_processing);
            # ensure that the pre processing code can be parsed
            p.parse(pre_processing, "pre processing");
            assertTrue(True, "pre processing: " + info.class_name);
        }
        if (info.post_processing) {
            string post_processing = sprintf("sub post_processing(%s obj, bool connect, *hash rtopts) { %s }", info.class_name, info.post_processing);
            # ensure that the post processing code can be parsed
            p.parse(post_processing, "post processing");
            assertTrue(True, "post processing: " + info.class_name);
        }
    }
}
